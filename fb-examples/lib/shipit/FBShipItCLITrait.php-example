<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/qbcfel6m
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\Str;
use type Facebook\ShipIt\Config\IShipItConfig;


trait FBShipItCLITrait {

  /** Custom exception handler that repeats the message at the bottom.
   *
   * Some of our scheduling tools report the last line of STDERR; with the
   * default handler, this is something fairly meaningless like '#8 {main}'
   */
  final private static function abortWithException(\Throwable $ex): noreturn {
    $first_line = Str\format(
      "Fatal error: Uncaught exception '%s' with message '%s'",
      \get_class($ex),
      $ex->getMessage(),
    );
    ShipItLogger::err(
      "%s\nStack trace:\n%s\n%s\n",
      $first_line,
      $ex->getTraceAsString(),
      $first_line,
    );
    exit(128);
  }

  abstract public static function cliMain(): void;

  final public static function cliForBinary(
    classname<IShipItConfig> $config_class,
  ): void {
    self::initForCli();
    print('--- Starting '.$config_class."\n");
    $config = $config_class::getBaseConfig();
    $runner = new ShipItPhaseRunner($config, $config_class::getPhases());
    self::executeRunner($runner);
  }

  final public static function cliShipIt(
    ?classname<FBShipItConfig> $config_class = null,
    ?string $_external_branch = null,
  ): void {
    self::initForCli();
    print('--- Starting ShipIt: '.$config_class."\n");
    $runner = new FBShipItProjectRunner(
      FBShipItCLIAction::SHIP_IT,
      $config_class,
    );
    self::executeRunner($runner);
  }

  final public static function cliImportIt(
    ?classname<FBShipItConfig> $config_class = null,
    ?string $external_branch = null,
  ): void {
    self::initForCli();
    print('--- Starting ImportIt: '.$config_class."\n");
    $runner = new FBShipItProjectRunner(
      FBShipItCLIAction::IMPORT_IT,
      $config_class,
      $external_branch,
    );
    self::executeRunner($runner);
  }

  private static function initForCli(): void {
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    if (\get_current_user() === 'svcscm') {
      throw new \Exception(
        "\n=================================================================\n".
        'This executable must be ran as an individual user, or via a hipster '.
        "account.\n".
        "\n".
        "If you are seeing this in an On Demand instance:\n".
        "  Unfortunately, ShipIt does not work in On Demand, because it\n".
        "  depends on access to your personal .gitconfig and SSH keys for\n".
        "  authentication. Until On Demand supports user certs, you'll need\n".
        "  to use a devserver.\n".
        "\n".
        "If you are seeing this from Chronos:\n".
        "  1. disable this job permanently\n".
        "  2. find your repository on bunnylol `oss reponame`\n".
        "  3. open workflow settings\n".
        "  4. tick the 'ShipIt Chronos Job' box.\n".
        "=================================================================\n",
      );
    }
  }

  private static function executeRunner(ShipItPhaseRunner $runner): void {
    try {
      $runner->run();
    } catch (ShipItShellCommandException $e) {
      $retry_causes = ImmSet {
        'abort: unknown compression type',
        'abort: abandoned transaction found!',
      };
      foreach ($retry_causes as $cause) {
        if (Str\search($e->getError(), $cause) !== null) {
          // Recover by restarting; the init phase will detect the bad state
          // fix it by deleting and re-cloning the repo.
          ShipItLogger::err("**** HG: TRANSACTION ABORT (t12066068) ****\n");
          ShipItLogger::err("%s\n", $e->getError());
          ShipItLogger::err("**** RESTARTING ****\n");
          $runner->run();
          return;
        }
      }
      throw $e;
    }
  }
}
