<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/afh36s1p
 */
namespace Facebook\ShipIt\Config;

use type Facebook\ShipIt\{
  FBCommonFilters,
  FBShipItCLIStaticConfig,
  FBShipItConfig,
  FBSourceBranchConfig,
  GetPathMappingsFn,
  ShipItChangeset,
  ShipItPathFilters,
};

final class FacebookexperimentalBuckit extends FBShipItConfig {

  <<__Override>>
  protected static function defaultProjectFilterChangeset(
    ShipItChangeset $changeset,
    GetPathMappingsFn $get_path_mappings,
  ): ShipItChangeset {
    return $changeset
      |> FBCommonFilters::applyAll(
        $$,
        shape(
          'stripCommonFiles/exceptions' => ImmVector {
            '@(?<!/facebook)/BUCK$@',
            '@(?<!/facebook)/TARGETS$@',
            '@/.*\.bzl$@',
          },
        ),
      )
      |> ShipItPathFilters::stripPaths(
        $$,
        // This looks redundant with FBCommonFilters, but is actually
        // required to strip BUCK/TARGETS/*.bzl files from `facebook`
        // subdirs, since we explicitly whitelisted all of those above.
        ImmVector {
          // NB: The Buckit repo will probably never contain Java, so keep
          // this filter simpler than `stripCommonFiles`.
          '@(^|/)facebook(/|$)@',
        },
      )
      |> ShipItPathFilters::moveDirectories($$, $get_path_mappings())
      /**
       * Drop internal versions of files that have oss counterparts,
       * as well as some other random files
       */
      |> ShipItPathFilters::stripPaths(
        $$,
        static::$filesToExclude->concat(
          static::$filesWithOssExtension->map($path ==> '@^'.$path.'$@'),
        ),
      )
      |> static::rewriteRemovingOssExtension($$)
      |> ShipItPathFilters::rewritePaths(
        $$,
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
          /* HH_IGNORE_ERROR[4107] __PHPStdLib */
          $path ==> \preg_replace(
            '@^((?!infra_macros/fbcode_macros).*)/TARGETS$@',
            '\1/BUCK',
            $path,
          ),
      );
  }

  private static ImmVector<string> $filesToExclude = ImmVector {
    '@infra_macros/macro_lib/convert/java.*\.py@',
  };

  private static ImmSet<string> $filesWithOssExtension = ImmSet {
    'infra_macros/package.json',
    'infra_macros/.buckconfig',
    'infra_macros/fbcode_macros/build_defs/allocator_targets.bzl',
    'infra_macros/fbcode_macros/build_defs/build_mode_overrides.bzl',
    'infra_macros/fbcode_macros/build_defs/dewey_artifact.bzl',
    'infra_macros/fbcode_macros/build_defs/third_party_config.bzl',
    'infra_macros/fbcode_macros/build_defs/paths_config.bzl',
    'infra_macros/fbcode_macros/build_defs/platform_overrides.bzl',
    'infra_macros/fbcode_macros/build_defs/visibility_exceptions.bzl',
    'infra_macros/fbcode_macros/build_defs/allocator_targets.bzl',
    'infra_macros/fbcode_macros/build_defs/auto_pch_blacklist.bzl',
    'infra_macros/fbcode_macros/.buckconfig',
    # Files that are not cleaned up enough for OSS yet
    'infra_macros/fbcode_macros/build_defs/java_binary.bzl',
    'infra_macros/fbcode_macros/build_defs/java_library.bzl',
    'infra_macros/fbcode_macros/build_defs/java_test.bzl',
    'infra_macros/fbcode_macros/build_defs/java_shaded_jar.bzl',
    'infra_macros/fbcode_macros/build_defs/prebuilt_jar.bzl',
    'infra_macros/fbcode_macros/build_defs/antlr3_srcs.bzl',
    'infra_macros/fbcode_macros/build_defs/scala_library.bzl',
    'infra_macros/fbcode_macros/build_defs/scala_test.bzl',
    'infra_macros/fbcode_macros/build_defs/core_tools_targets.bzl',
  };

  const string BUCK_FILES_TO_REWRITE =
    '@^((?!specs|infra_macros/fbcode_macros).*)/BUCK$@';

  private static function rewriteRemovingOssExtension(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItPathFilters::rewritePaths(
      $changeset,
      $path ==> {
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        $stripped = \preg_replace('@(.*)\.oss$@', '\1', $path);
        if (static::$filesWithOssExtension->contains($stripped)) {
          return $stripped;
        } else {
          return $path;
        }
      },
    );
  }

  <<__Override>>
  public static function getDefaultPathMappings(): ImmMap<string, string> {
    return ImmMap {
      'fbcode/experimental/pjameson/buckit/buckit/LICENSE' => 'LICENSE',
      'fbcode/experimental/pjameson/buckit/buckit/PATENTS' => 'PATENTS',
      'fbcode/experimental/pjameson/buckit/buckit/README' => 'README',
      'fbcode/experimental/pjameson/buckit/buckit/' => 'buckit/',
      'fbcode/experimental/pjameson/buckit/specs/' => 'specs/',
      'fbcode/fs_image/' => 'fs_image/', # Used by `image_*` macros.
      'fbcode/tools/build/buck/infra_macros/' => 'infra_macros/',
    };
  }

  <<__Override>>
  public static function getStaticConfig(): FBShipItCLIStaticConfig {
    return shape(
      'internalRepo' => 'fbsource',
      'githubOrg' => 'facebookexperimental',
      'githubProject' => 'buckit',
    );
  }

  <<__Override>>
  protected static function projectImportChangeset(
    ShipItChangeset $changeset,
    FBSourceBranchConfig $branch_config,
  ): ShipItChangeset {
    return $changeset
      |> static::rewriteAddingOssExtension($$)
      |> ShipItPathFilters::rewritePaths(
        $$,
        /* HH_IGNORE_ERROR[2049] __PHPStdLib */
        /* HH_IGNORE_ERROR[4107] __PHPStdLib */
        $path ==> \preg_replace(
          self::BUCK_FILES_TO_REWRITE,
          '\1/TARGETS',
          $path),
      )
      |> parent::projectImportChangeset($$, $branch_config);
  }

  private static function rewriteAddingOssExtension(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return ShipItPathFilters::rewritePaths(
      $changeset,
      $path ==> {
        if (self::$filesWithOssExtension->contains($path)) {
          return $path.'.oss';
        } else {
          return $path;
        }
      },
    );
  }

}
