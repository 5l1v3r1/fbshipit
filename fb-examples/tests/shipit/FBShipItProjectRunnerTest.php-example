<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/z8axydvl
 */
namespace Facebook\ShipIt;

use type Facebook\ImportIt\FBImportItBranchResolutionPhase;

use type Facebook\ShipIt\Config\FacebookPhabtest1Git;

<<\Oncalls('open_source')>>
final class FBShipItProjectRunnerTest extends BaseTest {

  private static function getPhases(
    FBShipItCLIAction $action,
    classname<FBShipItConfig> $config_class,
    ?string $external_branch = null,
  ): ImmVector<ShipItPhase> {
    // UNSAFE_EXPR
    return self::invoke_static_bypass_visibility(
      FBShipItProjectRunner::class,
      'getPhases',
      $action,
      $config_class,
      $external_branch,
    );
  }

  public function testGetPhasesNoBranch(): void {
    $phase = self::getPhases(
      FBShipItCLIAction::SHIP_IT,
      FacebookPhabtest1Git::class,
    )[0];
    invariant(
      $phase is FBShipItBranchResolutionPhase,
      'Unexpected phase type: %s',
      $phase,
    );
    \expect($phase)->toNotBeInstanceOf(FBImportItBranchResolutionPhase::class);
    $branches = $phase->getBranchConfigs();
    \expect($branches->count())->toBePHPEqual(3);
  }

  public function testGetPhasesWithBranch(): void {
    $phase = self::getPhases(
      FBShipItCLIAction::SHIP_IT,
      FacebookPhabtest1Git::class,
      'side_branch',
    )[0];
    invariant(
      $phase is FBShipItBranchResolutionPhase,
      'Unexpected phase type: %s',
      $phase,
    );
    \expect($phase)->toNotBeInstanceOf(FBImportItBranchResolutionPhase::class);
    $branches = $phase->getBranchConfigs();
    \expect($branches->count())->toBePHPEqual(1);
    \expect($branches[0]['internal'])->toBePHPEqual('side_branch');
  }

  public function testGetPhasesImportIt(): void {
    $phase = self::getPhases(
      FBShipItCLIAction::IMPORT_IT,
      FacebookPhabtest1Git::class,
      'master',
    )[0];
    invariant(
      $phase is FBImportItBranchResolutionPhase,
      'Unexpected phase type: %s',
      $phase,
    );
    \expect($phase)->toBeInstanceOf(FBImportItBranchResolutionPhase::class);
    $branches = $phase->getBranchConfigs();
    \expect($branches->count())->toBePHPEqual(1);
    \expect($branches[0]['internal'])->toBePHPEqual('master');
  }

  public function testGetPhasesImportItRequiresBranch(): void {
    $phase = self::getPhases(
      FBShipItCLIAction::IMPORT_IT,
      FacebookPhabtest1Git::class,
    )[0];
    invariant(
      $phase is FBImportItBranchResolutionPhase,
      'Unexpected phase type: %s',
      $phase,
    );
    \expect($phase)->toBeInstanceOf(FBImportItBranchResolutionPhase::class);
    \expect(() ==> $phase->getBranchConfigs())
      // @oss-disable: ->toThrow(\InvariantViolationException::class);
    ->toThrow(\HH\InvariantException::class); // @oss-enable
  }
}
