<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/upeiyyo1
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\Str;

<<\Oncalls('open_source')>>
final class FBGitHubUtilsTest extends BaseTest {
  public function exampleProjectCredentials(
  ): vec<(FBGitHubUtils::TAllCredentials, string, string, string, string)> {
    return vec[
      tuple(
        dict[
          'FACEBOOK_HHVM' => dict[
            'hhvm-bot' => shape(
              'access_token' => 'deadbeefdeadbeefdeadbeefdeadbeefdeadbeef',
            ),
          ],
          'FACEBOOK_DEFAULT' => dict[
            'facebook-github-bot' => shape(
              'access_token' => 'beefdeadbeefdeadbeefdeadbeefdeadbeefdead',
            ),
          ],
        ],
        'facebook',
        'hhvm',
        'hhvm-bot',
        'hhvm-bot@users.noreply.github.com',
      ),
      tuple(
        dict[
          'FACEBOOK_DEFAULT' => dict[
            'facebook-github-bot' => shape(
              'access_token' => 'beefdeadbeefdeadbeefdeadbeefdeadbeefdead',
            ),
          ],
        ],
        'facebook',
        'not-a-real-project',
        'facebook-github-bot',
        'facebook-github-bot@users.noreply.github.com',
      ),
    ];
  }

  static private function getCredentialsForProjectFrom(
    FBGitHubUtils::TAllCredentials $credentials,
    string $organization,
    string $project,
  ): ShipItGitHubCredentials {
    // UNSAFE_EXPR
    return self::invoke_static_bypass_visibility(
      FBGitHubUtils::class,
      'getCredentialsForProjectFrom',
      $credentials,
      $organization,
      $project,
    );
  }

  <<\DataProvider('exampleProjectCredentials')>>
  public function testPerProjectCredentials(
    FBGitHubUtils::TAllCredentials $credentials,
    string $organization,
    string $project,
    string $user,
    string $email,
  ): void {
    $credentials = self::getCredentialsForProjectFrom(
      $credentials,
      $organization,
      $project,
    );

    \expect($credentials['email'])->toBeSame($email);

    // We're using tokens exclusively.
    \expect($credentials['user'])->toBeNull();
    \expect($credentials['password'])->toBeNull();

    $this->assertLooksLikeAPIToken($credentials['access_token']);

    // nameof('facebook-github-bot-1') === 'Facebook Github Bot 1'
    \expect($credentials['name'])
      /* HH_IGNORE_ERROR[2049] __PHPStdLib */
      /* HH_IGNORE_ERROR[4107] __PHPStdLib */
      ->toBeSame(Str\capitalize_words(\strtr($user, '-', ' ')));
  }

  private function assertLooksLikeAPIToken(?string $token): void {
    $token = \expect($token)->toNotBeNull('Token should not be null');
    \expect(Str\length($token) === 40)->toBeTrue(
      'Password field has unexpected length: '.Str\length($token),
    );
    /* HH_IGNORE_ERROR[2049] __PHPStdLib */
    /* HH_IGNORE_ERROR[4107] __PHPStdLib */
    \expect(\ctype_xdigit($token))->toBeTrue(
      'Password field is not hex-like',
    );
  }
}
