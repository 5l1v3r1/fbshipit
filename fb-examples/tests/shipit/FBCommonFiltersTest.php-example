<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/tpyhlth1
 */
namespace Facebook\ShipIt;

use namespace HH\Lib\Str;


<<\Oncalls('open_source')>>
final class FBCommonFiltersTest extends BaseTest {
  public function testFBAuthorWithoutGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Joel Marcey <joelm@fb.com>');
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getAuthor())->toBeSame($in->getAuthor());
  }

  public function testFBAuthorWithGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Joel Marcey <joelm@fb.com>')
      ->withMessage('GitHub Author: Fred Emmott <fe@fb.com>');
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getAuthor())->toBeSame('Fred Emmott <fe@fb.com>');
    \expect($out->getMessage())->toBeSame("Pulled By: JoelMarcey");
  }

  public function examplesForAuthorEmailCorrection(): vec<(string, string)> {
    return vec[
      tuple('Email change <fredemmott@fb.com>', 'Fred Emmott <fe@fb.com>'),
      tuple(
        'Ex Employee email change <sgolemon@fb.com>',
        'Sara Golemon <saramg@fb.com>',
      ),
      tuple('Some Bot <svcscm@fb.com>', 'Some Bot <svcscm@fb.com>'),
      tuple(
        'Invalid User <thisuserdoesnotexist@fb.com>',
        'Invalid User <thisuserdoesnotexist@fb.com>',
      ),
    ];
  }

  <<\DataProvider('examplesForAuthorEmailCorrection')>>
  public function testAuthorEmailCorrection(
    string $in_author,
    string $expected_author,
  ): void {
    // fredemmott@ => fe@
    $changeset = (new ShipItChangeset())
      ->withAuthor($in_author)
      |> FBCommonFilters::applyAll($$);
    \expect($changeset->getAuthor())->toBeSame($expected_author);
  }

  public function testSVNAuthor(): void {
    $fake_uuid = Str\repeat('a', 36);
    $in = (new ShipItChangeset())
      ->withAuthor('fredemmott@'.$fake_uuid);
    $out = ShipItUserFilters::rewriteSVNAuthor($in, FBToGitHubUserInfo::class);
    \expect($out->getAuthor())->toBeSame('Fred Emmott <fe@fb.com>');
  }

  public function exampleFacebookDirectories(): vec<(string, bool)> {
    return vec[
      /* tuple(string $path, bool $private) */
      tuple('facebook', true),
      tuple('foo/facebook', true),
      tuple('com/facebook', false),
      tuple('foo/bar/facebook', true),
      tuple('java/com/facebook', false),
      tuple('facebook/com/facebook', true),
      tuple('facebook/foo/com/facebook', true),
      tuple('foo/facebook/com/facebook', true),
      tuple('foo/java/com/facebook', false),
      tuple('foo/bar/java/com/facebook', false),
      tuple('src/java/com/facebook', false),
      tuple('foo/com/facebook', false),
      tuple('foo/bar/com/facebook', false),
      tuple('foo/bar/baz/facebook', true),
    ];
  }

  <<\DataProvider('exampleFacebookDirectories')>>
  public function testFacebookDirectories(string $dir, bool $private): void {
    $file = $dir.'/foo';
    $changeset = (new ShipItChangeset())->withDiffs(ImmVector {
      shape('path' => $file, 'body' => 'junk'),
    });
    $changeset = FBCommonFilters::applyAll($changeset);

    if ($private) {
      $expected = vec[];
    } else {
      $expected = vec[$file];
    }
    $actual = vec($changeset->getDiffs()->map($diff ==> $diff['path']));
    \expect($actual)->toBePHPEqual($expected);
  }

  public function testPrivateFileInPublicFacebookDir(): void {
    $changeset = (new ShipItChangeset())->withDiffs(ImmVector {
      shape('path' => 'foo/com/facebook/TARGETS', 'body' => 'junk'),
      shape('path' => 'foo/com/facebook/BUILD_MODE.bzl', 'body' => 'junk'),
      shape('path' => 'foo/com/facebook/PLATFORM.bzl', 'body' => 'junk'),
      shape('path' => 'foo/com/facebook/something', 'body' => 'junk'),
    });
    $changeset = FBCommonFilters::applyAll($changeset);
    \expect(vec($changeset->getDiffs()->map($diff ==> $diff['path'])))
      ->toBePHPEqual(vec['foo/com/facebook/something']);
  }

  public function testOverideUnitFailuresStripped(): void {
    $in = (new ShipItChangeset())
      ->withMessage('Summary: @override-unit-failures');
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getMessage())->toBeSame('');
  }

  public function testBuildDirectiveStripped(): void {
    $in = (new ShipItChangeset())
      ->withMessage("Summary: Test diff\nblah @build[project1,project2]");
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getMessage())->toBeSame("Summary:\nTest diff\nblah");
  }

  public function testAccept2ShipStripped(): void {
    $in = (new ShipItChangeset())
      ->withMessage('Summary: #accept2ship');
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getMessage())->toBeSame('');

    // testing multi-line strings
    $in = (new ShipItChangeset())
      ->withMessage(
        'some_prefix
    #accept2ship
    some_suffix',
      );
    $out = FBCommonFilters::stripAccept2Ship($in);
    \expect($out->getMessage())->toBeSame(
      'some_prefix
        some_suffix',
    );

    $in = (new ShipItChangeset())
      ->withMessage("some_prefix\n#accept2ship\nsome_suffix");
    $out = FBCommonFilters::stripAccept2Ship($in);
    \expect($out->getMessage())->toBeSame("some_prefix\nsome_suffix");
  }

  public function testSevRevertSummaryStripped(): void {
    // only 'This reverts commit'
    $in = (new ShipItChangeset())
      ->withMessage(
        'Summary: This reverts commit abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd',
      );
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getMessage())->toBeSame(
      'Summary: This reverts commit abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd',
    );

    // only 'cause_a_sev_many_files'
    $in = (new ShipItChangeset())
      ->withMessage('Summary: cause_a_sev_many_files');
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getMessage())->toBeSame('Summary: cause_a_sev_many_files');

    // both
    $in = (new ShipItChangeset())
      ->withMessage(
        'Summary:This reverts commit abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd
some_text
cause_a_sev_many_files
Differential Revision: D1234567',
      );
    $out = FBCommonFilters::applyAll($in);
    \expect($out->getMessage())->toBeSame("Differential Revision: D1234567");
  }

  public function testFilterMessageSections(): void {
    foreach (FBCommonFilters::getSupportedMessageSectionNames() as $section) {
      $changeset = (new ShipItChangeset())
        ->withMessage(Str\format("%s:\n some text", $section));
      \expect(
        FBCommonFilters::filterMessageSections($changeset, ImmSet {})
          ->getMessage(),
      )->toBePHPEqual('', "Strips section '".$section."'");
      \expect(
        FBCommonFilters::filterMessageSections($changeset, ImmSet {$section})
          ->getMessage(),
      )->toBePHPEqual(
        Str\format("%s: some text", Str\capitalize_words($section)),
        "Keeps section '".$section."'",
      );
    }
  }

  public function testClosingPullRequestReferencedInSubject(): void {
    $changeset = (new ShipItChangeset())
      ->withSubject('Original Subject')
      ->withMessage('Closes https://github.com/facebook/fbshipit/pull/42');
    \expect(
      FBCommonFilters::referencePullRequestNumber($changeset)
        ->getSubject(),
    )->toBePHPEqual($changeset->getSubject().' (#42)');

    $changeset = (new ShipItChangeset())
      ->withSubject('Original Subject')
      ->withMessage(
        'Pull Request resolved: https://github.com/facebook/fbshipit/pull/42',
      );
    \expect(
      FBCommonFilters::referencePullRequestNumber($changeset)
        ->getSubject(),
    )->toBePHPEqual($changeset->getSubject().' (#42)');

    $changeset = $changeset
      ->withSubject('Update travis.yml to build only on nightly and latest')
      ->withMessage(
        'The Travis build has been failing for 1.5 months due to a breaking '.
        'change with a new Hack language feature (<<__OptionalDestruct>>). '.
        'Rather than trying to continue supporting the LTS Hack version '.
        '(3.24), it\'s easier to just bump up the minimum supported version.
Closes https://github.com/facebook/fbshipit/pull/50',
      );
    \expect(
      FBCommonFilters::referencePullRequestNumber($changeset)
        ->getSubject(),
    )->toBePHPEqual($changeset->getSubject().' (#50)');

    $changeset = $changeset
      ->withMessage('Closes https://github.com/facebook/fbshipit/issues/42');
    \expect(
      FBCommonFilters::referencePullRequestNumber($changeset)
        ->getSubject(),
    )->toBePHPEqual($changeset->getSubject());
  }

  public function testClosingPullRequestReferencedInSubjectWithAllFilters(
  ): void {
    $original_subject = 'Original Subject';
    $original_message = 'Summary:
Pull Request resolved: https://github.com/facebook/fbshipit/pull/42

This fixes a bug.';
    $changeset = (new ShipItChangeset())
      ->withSubject($original_subject)
      ->withMessage($original_message);
    $changeset = FBCommonFilters::applyAll($changeset);
    \expect($changeset->getSubject())->toBePHPEqual($original_subject.' (#42)');
    \expect($changeset->getMessage())->toBePHPEqual($original_message);

    $original_message = 'Summary:
Pull Request resolved: https://github.com/facebook/fbshipit/pull/42

This reverts commit 123456
cause_a_sev_many_files';
    $changeset = (new ShipItChangeset())
      ->withSubject($original_subject)
      ->withMessage($original_message);
    $changeset = FBCommonFilters::applyAll($changeset);
    \expect($changeset->getSubject())->toBePHPEqual($original_subject.' (#42)');
    \expect($changeset->getMessage())->toBePHPEqual('');
  }

  public function testFilterFBMentions(): void {
    $original_message = 'Summary:
This is a test of @[12341:Name] mentions.
So is @[12345:This] but with a greedy test char: ] foo

@bypass-lint

@[3213:Name2]';
    $changeset = (new ShipItChangeset())
      ->withMessage($original_message);
    $changeset = FBCommonFilters::applyAll($changeset);
    $expected_message = 'Summary:
This is a test of Name mentions.
So is This but with a greedy test char: ] foo

bypass-lint

Name2';
    \expect($changeset->getMessage())->toBePHPEqual($expected_message);
  }

  public function testFilterAllowEmptyCommit(): void {
    $original_message = '@allow-empty-commit';
    $changeset_1 = (new ShipItChangeset())
      ->withMessage($original_message)
      ->withDiffs(ImmVector {
        shape('path' => 'foo/com/facebook/TARGETS', 'body' => 'junk'),
        shape('path' => 'foo/com/facebook/BUILD_MODE.bzl', 'body' => 'junk'),
      });
    \expect(() ==> {
      FBCommonFilters::applyAll($changeset_1);
    })
      // @oss-disable: ->toThrow(\InvariantViolationException::class);
    ->toThrow(\HH\InvariantException::class); // @oss-enable
    $changeset_2 = (new ShipItChangeset())
      ->withMessage($original_message);
    $changeset_2 = FBCommonFilters::applyAll($changeset_2);
    \expect($changeset_2->getMessage())->toBePHPEqual('');
  }
}
