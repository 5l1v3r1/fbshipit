<?hh // strict
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This file was moved from fbsource to www. View old history in diffusion:
 * https://fburl.com/kbyrim2t
 */
namespace Facebook\ShipIt\Config;


use type Facebook\ShipIt\{ShipItChangeset};

<<\Oncalls('open_source')>>
final class FacebookOpenbmcTest extends FBConfigBaseTest {
  <<__Override>>
  public static function getExamplePathMappings(): ImmMap<string, ?string> {
    return ImmMap {
      'source_mirror/bash-4.3.tar.gz' => null,
      'facebook/arcanist/__phutil_library_map__.php' => null,
      'facebook/testfile.bb' => null,
      'localfile/facebook/noway.cpp' => null,
      'conf/layer.conf' => 'conf/layer.conf',
      'github/meta-facebook/classes/fb-only-network.bbclass' =>
        'meta-facebook/classes/fb-only-network.bbclass',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot_2013.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2013.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-fw-utils_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot.inc' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot.inc',
      'github/meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb' =>
        'meta-aspeed/recipes-bsp/u-boot/u-boot-mkimage_2016.07.bb',
      'github/meta-aspeed/recipes-bsp/u-boot/verified-boot.inc' =>
        'meta-aspeed/recipes-bsp/u-boot/verified-boot.inc',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_2.6.28.9.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.1.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bbappend' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.17.bbappend',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bbappend' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_4.18.bbappend',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_5.0.bb' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_5.0.bb',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed_5.0.bbappend' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed_5.0.bbappend',
      'github/meta-aspeed/recipes-kernel/linux/linux-aspeed.inc' =>
        'meta-aspeed/recipes-kernel/linux/linux-aspeed.inc',
      'github/sync_yocto.sh' => 'sync_yocto.sh',
      'github/yocto/.gitignore' => 'yocto/.gitignore',
    };
  }

  <<__Override>>
  protected static function getExampleImportPathMappings(
  ): ImmMap<string, string> {
    $rejected_paths = FacebookOpenbmc::getUnsupportedImportPaths();
    return parent::getExampleImportPathMappings()
      ->filterWithKey(($external_path, $_internal_path) ==> {
        foreach ($rejected_paths as $reject) {
          /* HH_IGNORE_ERROR[2049] __PHPStdLib */
          /* HH_IGNORE_ERROR[4107] __PHPStdLib */
          if (\preg_match($reject, $external_path)) {
            return false;
          }
        }
        return true;
      });
  }

  <<__Override>>
  protected static function getExampleBranchMappings(
  ): ImmMap<string, ImmMap<string, ?string>> {
    return ImmMap {
      'master' => static::getExamplePathMappings(),
      'helium' => static::getExamplePathMappings(),
    };
  }

  <<__Override>>
  public function testGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>",
      )
      ->withAuthor("Jubin Mehta <jmehta@fb.com>");
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
  }

  <<__Override>>
  public function testGitHubAuthorWithSupportedFieldAfter(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n".
        "Github PR Sync: foo",
      )
      ->withAuthor("Jubin Mehta <jmehta@fb.com>");
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
  }

  <<__Override>>
  public function testPulledBy(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>",
      )
      ->withAuthor("Jubin Mehta <jmehta@fb.com>");
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Pulled By: jmehta');
  }

  <<__Override>>
  public function testPulledByWithUnixnameDifferentToGithub(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>",
      )
      ->withAuthor("Sai Dasari <sdasari@fb.com>");
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Pulled By: sdasari73');
  }

  <<__Override>>
  public function testPulledByWithBotAuthor(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: jmehta",
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Pulled By: jmehta');
  }

  <<__Override>>
  public function testPulledByWithBotAuthorAndMultipleReviewers(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: jmehta, sdasari",
      )
      ->withAuthor('svcscm <svcscm@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toNotContainSubstring('Pulled By:');
    \expect($out->getMessage())
      ->toContainSubstring('Reviewed By: jmehta, sdasari73');
  }

  <<__Override>>
  public function testNoPulledByIfNoGitHubAuthor(): void {
    $in = (new ShipItChangeset())
      ->withAuthor('Jubin Mehta <jmehta@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBeSame('Jubin Mehta <jmehta@fb.com>');
  }

  public function testNoReviwedBy(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>",
      )
      ->withAuthor('Jubin Mehta <jmehta@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Reviewed By: jmehta');
  }

  public function testBotReviwedBy(): void {
    $in = (new ShipItChangeset())
      ->withMessage(
        "Closes https://github.com/facebook/openbmc/pull/219\n".
        "GitHub Author: Foo Bar <foobar@example.com>\n\n".
        "Reviewed By: svcscm",
      )
      ->withAuthor('Jubin Mehta <jmehta@fb.com>');
    $out = static::map($in);
    \expect($out->getAuthor())->toBePHPEqual('Foo Bar <foobar@example.com>');
    \expect($out->getMessage())->toContainSubstring('Reviewed By: jmehta');
  }
}
